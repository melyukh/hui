namespace Math;

class Computer
{
    private Dictionary<string, double> valueOfKoeff = new Dictionary<string, double>()
    {
        {"üçá", 1.0 },
        {"üçâ", 0.8 },
        {"üçí", 1.0 },
        {"üçä", 1.2 },
        {"üíé", 10.0},
        {"üîî", 5.0 },
        {"üçÄ", 2.0 },
        {"üçæ", 3.0 },
    };
    public double ComputeRow(in List<string> line, in double bet, ref List<string> UniqueContainerOfPlayedElems, ref Dictionary<string, int> dict)
    {
        int numOfCurrent = 1;
        string element = line[0];

        if (element == "üëë") //–µ—Å–ª–∏ –Ω–∞—á–∞–ª–æ —Å –≤–∞–π–ª–¥–∞, —Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –µ–¥–µ–º–µ–Ω—Ç –∫ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –ª–∏–Ω–∏—è –µ—Å–ª–∏ –∂–µ –≤—Å–µ –≤–∞–π–ª–¥—ã —Ç–æ *20
        {
            for (int j = 1; j < 5; j++)
            {
                if (line[j] != element)
                {
                    element = line[j];
                    for (int i = 1; i < 5; i++)
                    {
                        if (line[i] == "üëë" || line[i] == element)
                            numOfCurrent++;
                        else
                            break;
                    }
                    if (numOfCurrent >= 3) // –µ—Å–ª–∏ —Å—ã–≥—Ä–∞–ª–æ, —Ç–æ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–∏—à—Ä—ã—à, –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–≤—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–æ–≤–∫–∞–º–∏ –Ω–∞ –ø—Ä–æ—Ö–æ–¥
                    {
                        if (!UniqueContainerOfPlayedElems.Contains(element)) //–¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å—ã–≥—Ä–∞–≤—à–∏—Ö
                            UniqueContainerOfPlayedElems.Add(element);

                        if (dict.ContainsKey(element)) //–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å —Å—ã–≥—Ä–∞–≤—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–º–µ–Ω—è—Ç—å
                        {
                            if (numOfCurrent * 2 > dict[element])
                                dict[element] = numOfCurrent * 2;
                        }
                        else
                            dict.Add(element, numOfCurrent * 2);

                        return bet * (numOfCurrent - 2) * valueOfKoeff[element];
                    }
                    else
                        return 0;
                }
            }
            return bet * 20.0;
        }

        else //–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –±–µ–∑ –≤–∞–π–ª–¥–∞ –≤ –Ω–∞—á–∞–ª–µ
        {
            for (int i = 1; i < 5; i++)
            {
                if (line[i] == "üëë" || line[i] == element)
                    numOfCurrent++;
                else
                    break;
            }
            if (numOfCurrent >= 3)
            {
                if (!UniqueContainerOfPlayedElems.Contains(element)) //–¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å—ã–≥—Ä–∞–≤—à–∏—Ö
                    UniqueContainerOfPlayedElems.Add(element);
                
                if (dict.ContainsKey(element)) //–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å —Å—ã–≥—Ä–∞–≤—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–º–µ–Ω—è—Ç—å
                {
                    if (numOfCurrent * 2 > dict[element])
                        dict[element] = numOfCurrent * 2;
                }
                else
                    dict.Add(element, numOfCurrent * 2);

                return bet * (numOfCurrent - 2) * valueOfKoeff[element];
            }
            else
                return 0;    
        }
    }
    public double ComputeRow(in List<string> line, in double bet, string elementToPlay) //–ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª—è –∏–≥—Ä—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É(—Ç–∏–ø–æ –∫–æ–≥–¥–∞ –∑–∞–ª–µ—Ç–µ–ª –¥–≤–æ–π–Ω–æ–π —É—Å–ø–µ—Ö)
    {
        int numOfCurrent = 0;
        foreach (string element in line)
        {
            if (element == elementToPlay)
                numOfCurrent++;
            else
                break;
        }
        return numOfCurrent >= 3 ? bet * (numOfCurrent - 2) * valueOfKoeff[elementToPlay] : 0;
    } 
}
